# пакет научных и инженерных библиотек, статистических и других методов(из пакета scipy класс stats)
import scipy.stats as st
import numpy as np  # набор процедур для быстрых операций с массивами, включая математические, логические, манипуляции с формами, сортировку, выбор, ввод-вывод. ,
# дискретные преобразования Фурье, базовая линейная алгебра, базовые статистические операции, случайное моделирование и многое другое

# распределение стьюдента - приближается к нормальному при величине выборки N>30 (количество степеней свободы def=N-1)
# норм распределение мы можем использовать если знаем ст откл ГС иначе t-распределение
# проверим M0 гипотезу, что выборка: средним X=10.9, std = 2, N=20 принадлежит ГС c mean=10
std = 2
X = 10.9
N = 20
mean = 10
# среднекв откл среднего выборки от среднего ГС
se = std/np.sqrt(N)
# отклонение выраженное в сигмах стьюдента
t = (X-mean)/se
# вероятность такого и большего отклонения от среднего ГС, в случае < 0,005 можем отвергать гипотезу М0
# считает относительно центра = 0
# расчет вероятности Р того что верна М0, зная t-значение (прямая задача)
p = st.t.sf(abs(t), N-1)
# по Стьюденту р=0.006 - не отвергаем М0
print(f'{round(p*2, 2)}')
# по норм р=0.00 - отвергаем М0
# считает относительно
print(f'{round((1-st.norm.cdf(t))*2, 2)}')

# Рассчитайте доверительный интервал основываясь на знании t - распределения X=89,9 sd=11,3 n=20
mean = 89.9
sd = 11.3
n = 20
# степень свободы
df = n - 1
# 95% доверительный интервал
p = 0.95
alpha = 1-p
# стандартная ошибка среднего
se = sd/np.sqrt(n)

# ppf - Percent point function
# расчет t-значения, зная  вероятность Р того что верна М0 (обратная задача)
# делим на два, так как по умолчанию функция считает для одного конца, а нам надо для двух
# считает вероятность получения значения правее процента в обе стороны, т.о. р=0,975(посчитает справа 0,025 и слева)
# если бы передали параметр 0,95 то в итоге посчитал бы значение t(количество сигм se) для +-0,05 и 90% доверительного интервала
t_value = st.t(df).ppf(1-(alpha/2))
t_value = np.abs(st.t.ppf(1 - (alpha / 2), df))  # альтернатива вызова ф-ии
# доверительный интервал t_value - это 1,96 при норм распределении (95% доверительный интервал)
сonfidence_interval = (mean-t_value*se, mean+t_value*se)
print('[%.2f; %.2f]' % сonfidence_interval)

""" # Используя t - критерий проверьте, можно ли считать наблюдаемые различия в возрасте между лучшими актрисами и актерами  статистически достоверными. 
Использовать t - критерий можно, тольео если выборки близки к нормальным, для этого проверяют на нормальность"""
# Средний возраст мужчин равен 45, sd = 9.
# Средний возраст женщин равен 34, sd = 10.
x_men_bar = 45
sd_men = 9

x_w_bar = 34
sd_w = 10
# размер выборки
n = 100
# доверительный интервал
alpha = 0.95
# средняя стандартная ошибка среднего двух выборок
se = np.sqrt(sd_men**2 / n + sd_w**2 / n)
# средний критерий стьюдента двух выборок, для нулевой гипотезы что это одна ГС и нет разницы в среднем ГС этих выборок (М1-М2=0)
# в числителе не пишем : -(М1-М2), т.к. оно равно 0
t = (x_men_bar - x_w_bar) / se
# общая степень свободы
df = n + n - 2
# расчет t-значения, зная  вероятность Р того что верна М0 (обратная задача)
t_trust = np.abs(st.t.ppf((1 - alpha) / 2, df))
print(f"""t-value: {t}
p-value for the {alpha * 100}% confidence interval: {t_trust}
""")
if t > t_trust:
    print("rejecting the null hypothesis")
elif t < t_trust:
    print("acepting the null hypothesis")
